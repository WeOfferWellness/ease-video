<section class="lobby">
    <div class="left">
        <h3>Your meetingâ€™s ready</h3>
        <div class="share">
            <form action="#" onsubmit="return false">
                <button class="btn" type="button" onclick="alert('Share this link with others so they can join.')">Add others</button>
            </form>
            <div class="link">
                <input id="shareLink" value="<%= @full_url %>" readonly>
                <button class="btn" type="button" onclick="copyLink()">Copy</button>
            </div>
            <small>People who use this meeting link must get your permission before they can join.</small>
        </div>
    </div>

    <div class="preview">
        <video id="selfPreview" autoplay playsinline muted></video>
        <div class="toolbar">
            <button id="toggleMic" class="circle" aria-label="Toggle microphone">ðŸŽ¤</button>
            <button id="toggleCam" class="circle" aria-label="Toggle camera">ðŸŽ¥</button>
            <form action="<%= Routes.meeting_path(@conn, :start, @code) %>" method="post" class="inline">
                <button class="btn primary" type="submit">Join now</button>
            </form>
        </div>
    </div>
</section>

<script>
    (async () => {
        const video = document.getElementById('selfPreview');
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            window.__lumeStream = stream;
            video.srcObject = stream;
            await video.play();

            const micBtn = document.getElementById('toggleMic');
            const camBtn = document.getElementById('toggleCam');
            micBtn.onclick = () => {
                stream.getAudioTracks().forEach(t => t.enabled = !t.enabled);
                micBtn.textContent = stream.getAudioTracks()[0]?.enabled ? "ðŸŽ¤" : "ðŸ”‡";
            };
            camBtn.onclick = () => {
                stream.getVideoTracks().forEach(t => t.enabled = !t.enabled);
                camBtn.textContent = stream.getVideoTracks()[0]?.enabled ? "ðŸŽ¥" : "ðŸš«";
            };
        } catch (e) {
            console.error(e);
            alert("We couldn't access your camera/microphone. Please allow permissions.");
        }
    })();
    function copyLink(){
        const i=document.getElementById('shareLink'); i.select(); i.setSelectionRange(0, 99999); document.execCommand('copy');
    }
</script>

<style>
    .lobby{display:grid;grid-template-columns:360px 1fr;gap:24px;align-items:start;padding:24px}
    @media (max-width: 900px){ .lobby{grid-template-columns:1fr} }
    .left{border:1px solid #e5e7eb;border-radius:16px;padding:16px}
    .share .link{display:flex;gap:8px;margin:10px 0}
    .share input{flex:1;padding:10px;border:1px solid #dadce0;border-radius:8px}
    .preview{display:flex;flex-direction:column;align-items:center;gap:12px}
    #selfPreview{width:100%;max-width:960px;aspect-ratio:16/9;background:#000;border-radius:12px;object-fit:cover}
    .toolbar{display:flex;gap:12px;align-items:center}
    .btn{border:1px solid #dadce0;border-radius:24px;padding:10px 18px;background:#fff;cursor:pointer}
    .btn.primary{background:#1a73e8;border-color:#1a73e8;color:#fff}
    .circle{width:44px;height:44px;border-radius:50%;border:1px solid #dadce0;background:#fff;cursor:pointer}
</style>
